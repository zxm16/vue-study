3.6 v-once
	v-once的作用是只会渲染对应元素一次，数据更新不会引起视图的更新，目的是优化页面的性能
	例：
	<div id="app" v-cloak>
	    <h2 v-once>{{a}}</h2>
	    <button @click="add">按我加一</button>
	    <button @click="minus">按我减一</button>
	</div>

	<script>
    var vue = new Vue({
        el: '#app',
        data:{
            a:100
        },
        methods:{
            add() {
            //让当前的a进行自加
                this.a++
                console.log(a)
            },
            minus() {
                this.a--
                console.log(a)
            }
        }
    })    ==>在页面上显示的数据不会改变，但console里的数据会增加
	</script>
	v-once使用的场景通常是没有动态的元素内容，比如一些文章，一些固定标题



3.7 v-pre
	v-pre属性作用是跳过该元素的编译过程，直接显示元素内部的文本，功能是跳过大量的没有指令的节点
	<div id="app" v-cloak>
	    <h2 v-pre>{{a}}</h2>
	    <h1>{{a}}</h1>
	</div>

	<script>
	    var vue = new Vue({
	        el: '#app',
	        data:{
	            a:100
	        }
	    })			==> 显示的结果是：第一个h2标签显示的是{{a}}、第二个h1标签显示的是100
	</script>
	浏览器显示的就是没有编译前的h2元素中的文本内容，v-pre属性的优点就是优化页面的加载性能



3.8 v-on
	v-on的作用是给元素添加事件监听，可以简写为@
	我们学习的JavaScript的事件监听都可以在vue中使用
	（1）原生的JavaScript事件监听：
		事件名称		方法
		点击			onclick
		双击			ondbclick
		鼠标移上		onmouseenter
		鼠标离开		onmouseleave
		鼠标滑过		onmousemove
		鼠标移除		onmouseout
		失去焦点		onblur
		聚焦			onfocus
		键盘事件		onkeydown
	（2）上变方法都是原生的JavaScript的事件方法，在vue中使用一律去除on，然后添加v-on或者@
	例：
		比如点击：
		<div id="app" v-cloak>
		    <h2 >{{a}}</h2>
		    <button @click="add">按我加一</button>
		    <button v-on:click="minus">按我减一</button>
		</div>
	（3）需要注意的是所有的方法都必须写在vue的methods中，不允许在外部罗列方法名称
		<script>
		    var vue = new Vue({
		        el: '#app',
		        data:{
		            a:100
		        },
		        methods:{
		            add() {
		                this.a++
		            },
		            minus() {
		              this.a--
		            }
		        }
		    })
		</script>
	（4）下面的代码是错误的因为vue没有定义对应的方法名称
		<script>
		    var vue = new Vue({
		        el: '#app',
		        data:{
		            a:100
		        },
		            add() {
		                this.a++
		            },
		            minus() {
		              this.a--
		            }
		    })
		</script>
	（5）原生的JavaScript的事件监听方法是不能在vue中与vue监听事件方法混用的
		如：<button onclick="add">按我加一</button>
	（6）同名方法会有覆盖情况后写方法会覆盖先写方法
			methods:{
		            add() {
		                this.a++
		            },
		            minus() {
		              this.a--
		            },
		            add() {
		              this.a+=2  
		            },
		            add() {
		                this.a+=4
		            }
		        }      ===> 上面代码实现的效果是加四，因为后写同名方法会覆盖先写同名方法
    (7) 方法中是可以传入参数的
    	<div id="app" v-cloak>
		    <h2 >{{a}}</h2>
		    <button @click="add(5)">按我加五</button>
		</div>
		<script>
		    var vue = new Vue({
		        el: '#app',
		        data:{
		            a:100
		        },
		        methods:{
		            add(num) {
		                this.a += num
		            }
		        }
		    })
		</script>
	（6）如果方法中没有传入值，默认输出会有该方法的事件参数
		<div id="app" v-cloak>
		    <h2 >{{a}}</h2>
		    <button @click="add">按我加五</button>
		</div>

		<script>
		    var vue = new Vue({
		        el: '#app',
		        data:{
		            a:100
		        },
		        methods:{
			        add(event) {
	                	console.log(event)
	            	}
		        }
		    })
		</script>
		
