3.4 v-html和v-text
	v-html和v-text都是渲染文本指令，使用场景会有不同
	现在的我们学习的渲染方法
	双大括号插值：{{}}
	-> v-text
	-> v-html
	1.v-text和{{}}
		双大括号和v-text渲染内容类似，都会以文本类型进行编译。
		{{}}和v-text区别：
		（1）在使用{{}}渲染的时候在开始加载的时候隐约会出现{{}}，v-text不会出现这种现象
		（2）双大括号更加灵活，中间是可以添加内容的，从下面例子可以看出v-text在<p>标签中加了-------也不能显示，
			 所以所双大括号要灵活一些。（v-中间不允许插入内容）
			 例：
			  <p v-text="a">----------</p>  ==> 显示的是：插值内容 
		      <p>---------{{a}}-------</p>  ==> 显示的是：---------插值内容-------
		      data：{ a：插值内容 }
	2.v-text、{{}}和v-html
		(1)v-text、{{}}的渲染方式和v-html的渲染方式有本质不同，v-html会识别模板
		(2)和v-text类似的是v-html中间也是不允许插值的
		例
		<p v-html="a"></p> ==> 显示的是：他的内容编译为了<h1></h1>（其实就是编译为了文章标题）

3.5 v-cloak
	v-cloak指令的作用是vue示例渲染后关联结束
	双大括号插值语法在遇到网络延迟的时候会出现编译签的文本如：{{a}}
	那么我们怎么解决呢？我们可以用v-cloak结合CSS解决出现双大括号的难题
	例：
	<style>
        [v-cloak]{
            display: none;
        }
    </style>

    <body>

	<div id="app" v-cloak>
	    <p>{{a}}</p>
	</div>

	<script>
	    var vue = new Vue({
	        el: '#app',
	        data:{
	            a:'我是要渲染的指令v-cloak'
	        },
	    })
	</script>
	</body>
	这样在CSS中加入display：none；时就可以要么看见空白要么就显示内容
	[v-cloak]css选择器选择的是html结构中v-cloak属性，有这个属性的元素设置display:none;又由于v-cloak这个属性在vue的实例加载完后便会消失
	或者关联结束，所以就需要这个元素的隐藏状态，元素就会显示，这样造成的结果是要么空白要么显示编译后的文本
